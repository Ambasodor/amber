import haven.Window as Window
import haven.Coord as Coord
import haven.Coord2d as Coord2d
import haven.HavenPanel as HavenPanel
import haven.GameUI as GameUI
import haven.Button as Button
import haven.Label as Label
import haven.FlowerMenu as FlowerMenu
import haven.OCache as OCache
import haven.MCache as MCache
import haven.ISBox as ISBox
import haven.automation.Utils as Utils
import haven.automation.GobSelectCallback as GobSelectCallback
import haven.automation.AreaSelectCallback as AreaSelectCallback
import haven.automation.JythonAutomation as JythonAutomation
import haven.GAttrib as GAttrib
import haven.ResDrawable as ResDrawable
import haven.FastMesh.MeshRes as MeshRes

from time import sleep, time
from synchronize import make_synchronized

PLANT_FREQ = 3600
PLANT_NUM = 1
HARVEST_STAGE = 3

@make_synchronized
def gettilegobs(oc,coord,gui):
    gobs = []
    for gob in oc:
        res = gob.getres()
        dist = gob.rc.dist(coord)
        if res != None and dist < 1:
            gobs.append(gob)
    return gobs

class State:
    WAIT, RUN, TERM = range(3)

class StartButton(Button):
    def __init__(self, width, caption):
        Button.__init__(self, width, caption)
    def click(self):
        self.parent.field_length = self.parent.BottomRight.x - self.parent.TopLeft.x + 1
        self.parent.field_width = self.parent.BottomRight.y - self.parent.TopLeft.y + 1
        self.parent.state = State.RUN
        HavenPanel.lui.cons.out.println("Farming!")

class ClearButton(Button):
    def __init__(self, width, caption):
        Button.__init__(self, width, caption)
    def click(self):
        self.parent.state = State.WAIT
        HavenPanel.lui.cons.out.println("All Cleared!")

class FarmerBot(GobSelectCallback, AreaSelectCallback, Window):
    state = State.WAIT
    gui = None

    TopLeft = None
    BottomRight = None
    field_length = 0
    field_width = 0

    next_tile = 0

    def __init__(self, coord, title):
        Window.__init__(self, coord, title)
        startbtn = StartButton(70, "Farm!")
        self.add(startbtn, Coord(65, 140))

        clearbtn = ClearButton(70, "Clear")
        self.add(clearbtn, Coord(140, 140))
    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.gui.map.unregisterGobSelect()
        self.gui.map.unregisterAreaSelect()
        self.destroy()

    def wdgmsg(self, sender, msg, *args):
        if sender == self.cbtn:
            self.die()
        else:
            Window.wdgmsg(self,sender, msg, args)

    def type(self, key, ev):
        if (key == 27):
            if (self.cbtn.visible):
                self.die()
                return True
        return Window.type(self,key, ev)

    def die(self):
        self.reqdestroy()
        self.state = State.TERM

    def gobselect(self, gob):
        res = gob.getres()
        if(res != None):
            HavenPanel.lui.cons.out.println("gob selected: {0}".format(res.name))

    def areaselect(self, a, b):
        HavenPanel.lui.cons.out.println("Coord A {0} : Coord B {1}".format(a,b))
        self.TopLeft = a
        self.BottomRight = b

    def check_next_tile(self):
        shift_width=int(self.next_tile/self.field_width)
        shift_length=self.next_tile%self.field_width
        coord = self.TopLeft.add(shift_width,shift_length).mul(11).add(5,5)
        HavenPanel.lui.cons.out.println("tile {0} {1}:{2}".format(self.next_tile,shift_width,shift_length))
        action  = "Plant"
        tile = self.next_tile
        for gob in gettilegobs(self.gui.map.glob.oc, Coord2d(coord), self.gui):
            res = gob.getres()
            if res.name.startswith("gfx/terobjs/plants"):
                rd = gob.getattr(ResDrawable)
                stage = 0
                stgmaxval = 0
                if rd != None:
                    stage = rd.sdt.peekrbuf(0)
                    for layer in res.layers(MeshRes):
                        stg = layer.id / 10
                        if (stg > stgmaxval):
                            stgmaxval = stg
                    HavenPanel.lui.cons.out.println("Found {0} stage {1}/{2}".format(res.name,stage,stgmaxval))
                    if stage == stgmaxval or stage == HARVEST_STAGE:
                        HavenPanel.lui.cons.out.println("Crop is ripe - Harvesting")
                        action = "Harvest"
                    else:
                        HavenPanel.lui.cons.out.println("Crop is growing - go next")
                        action = "Skip"
        self.next_tile = (self.next_tile+1)%(self.field_length*self.field_width)
        return [action, tile, coord]

    def isplantingtime(self):
        return True

    def run(self):
        self.gui = HavenPanel.lui.root.getchild(GameUI)
        self.gui.add(self,Coord(self.gui.sz.x / 2 - self.sz.x / 2, self.gui.sz.y / 2 - self.sz.y / 2 - 200))
        self.gui.map.registerGobSelect(self)
        self.gui.map.registerAreaSelect(self)
        while self.state != State.TERM:
            if self.state == State.RUN:
                [action, tile, coord] = self.check_next_tile()
                HavenPanel.lui.cons.out.println("Next action: {0} tile: {1} coord: {2}".format(action, tile, coord))
                if action == "Plant" and self.isplantingtime() == True:
                    HavenPanel.lui.cons.out.println("planting")
                elif action == "Harvest":
                    HavenPanel.lui.cons.out.println("harvesting")
                sleep(1)

with FarmerBot(Coord(270,180),"Farmer Bot") as bot:
    bot.run()